name: "Vault"
description: "Authenticate to Vault via GitHub OIDC and export secrets to env"
inputs:
  url:
    description: "Vault URL, e.g. https://vault.example.com"
    required: true
  role:
    description: "Vault role to use for JWT auth"
    required: true
  path:
    description: "Vault auth method path (e.g. github-jwt)"
    required: false
    default: "github-jwt"
  audience:
    description: "OIDC audience for token request"
    required: false
    default: "vault"
  tls-skip-verify:
    description: "Skip TLS verification (true/false)"
    required: false
    default: "false"
  export-token:
    description: "Export VAULT_TOKEN to GITHUB_ENV (true/false)"
    required: false
    default: "true"
  secrets:
    description: |
      Lines in format: "<vault_path> <key> | ENV_NAME ;". Example:
      "ci/data/dev/kubeconfig/k8s-dev kubeconfig | KUBECONFIG_K8S_DEV_BASE64 ;"
    required: false
    default: ""
outputs:
  token:
    description: "Vault token (client_token)"
    value: ${{ steps.auth.outputs.token }}
runs:
  using: "composite"
  steps:
    - name: Authenticate to Vault and export secrets
      id: auth
      shell: bash
      env:
        VAULT_URL: ${{ inputs.url }}
        VAULT_ROLE: ${{ inputs.role }}
        VAULT_AUTH_PATH: ${{ inputs.path }}
        OIDC_AUDIENCE: ${{ inputs.audience }}
        TLS_SKIP_VERIFY: ${{ inputs["tls-skip-verify"] }}
        EXPORT_TOKEN: ${{ inputs["export-token"] }}
        SECRETS_SPEC: ${{ inputs.secrets }}
      run: |
        set -euo pipefail

        ensure_yq() {
          if command -v yq >/dev/null 2>&1; then
            return 0
          fi
          ARCH=$(uname -m)
          case "$ARCH" in
            x86_64|amd64) ARCH=amd64 ;;
            aarch64|arm64) ARCH=arm64 ;;
            *) echo "Unsupported architecture: $ARCH" >&2; exit 1 ;;
          esac
          TMP_YQ="/usr/local/bin/yq"
          if [ ! -w "/usr/local/bin" ]; then
            TMP_YQ="/tmp/yq"
            export PATH="/tmp:$PATH"
          fi
          wget -qO "$TMP_YQ" "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_${ARCH}"
          chmod +x "$TMP_YQ"
        }

        CURL_FLAGS=("-sS")
        if [ "${TLS_SKIP_VERIFY,,}" = "true" ]; then
          CURL_FLAGS+=("-k")
        fi

        ensure_yq

        if [ -z "${ACTIONS_ID_TOKEN_REQUEST_TOKEN:-}" ] || [ -z "${ACTIONS_ID_TOKEN_REQUEST_URL:-}" ]; then
          echo "OIDC environment not available. Ensure 'permissions: id-token: write' is set." >&2
          exit 1
        fi

        OIDC_URL="${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=${OIDC_AUDIENCE}"
        OIDC_JSON=$(curl -H "Authorization: bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" "${OIDC_URL}" "${CURL_FLAGS[@]}")
        OIDC_TOKEN=$(echo "${OIDC_JSON}" | yq -p=json -r '.value')
        if [ -z "${OIDC_TOKEN}" ] || [ "${OIDC_TOKEN}" = "null" ]; then
          echo "Failed to obtain OIDC token" >&2
          echo "${OIDC_JSON}" >&2
          exit 1
        fi

        LOGIN_BODY=$(printf '{"role":"%s","jwt":"%s"}' "${VAULT_ROLE}" "${OIDC_TOKEN}")
        LOGIN_JSON=$(curl "${CURL_FLAGS[@]}" -H 'Content-Type: application/json' -X POST "${VAULT_URL}/v1/auth/${VAULT_AUTH_PATH}/login" -d "${LOGIN_BODY}")
        VAULT_TOKEN=$(echo "${LOGIN_JSON}" | yq -p=json -r '.auth.client_token')
        if [ -z "${VAULT_TOKEN}" ] || [ "${VAULT_TOKEN}" = "null" ]; then
          echo "Failed to authenticate to Vault" >&2
          echo "${LOGIN_JSON}" >&2
          exit 1
        fi

        echo "::add-mask::${VAULT_TOKEN}"
        echo "token=${VAULT_TOKEN}" >> "$GITHUB_OUTPUT"
        if [ "${EXPORT_TOKEN,,}" = "true" ]; then
          echo "VAULT_TOKEN=${VAULT_TOKEN}" >> "$GITHUB_ENV"
        fi

        # Parse secrets spec
        if [ -n "${SECRETS_SPEC}" ]; then
          # Normalize newlines and semicolons as separators
          NORMALIZED=$(printf "%s\n" "${SECRETS_SPEC}" | tr -d '\r')
          IFS=$'\n' read -r -d '' -a LINES < <(printf "%s\n" "${NORMALIZED}" && printf '\0')
          for raw in "${LINES[@]}"; do
            line=$(echo "$raw" | sed 's/[[:space:]]*$//')
            [ -z "$line" ] && continue
            # Strip trailing ; if present
            line=$(echo "$line" | sed 's/[[:space:]]*;[[:space:]]*$//')
            [ -z "$line" ] && continue
            # Split by |
            left=$(printf "%s" "$line" | awk -F '|' '{print $1}')
            right=$(printf "%s" "$line" | awk -F '|' '{print $2}')
            left=$(echo "$left" | xargs)
            right=$(echo "$right" | xargs)
            [ -z "$left" ] && continue
            [ -z "$right" ] && continue
            vault_path=$(printf "%s" "$left" | awk '{print $1}')
            key=$(printf "%s" "$left" | awk '{print $2}')
            env_name="$right"
            if [ -z "$vault_path" ] || [ -z "$key" ] || [ -z "$env_name" ]; then
              echo "Invalid secret spec: $line" >&2
              exit 1
            fi
            SECRET_JSON=$(curl "${CURL_FLAGS[@]}" -H "X-Vault-Token: ${VAULT_TOKEN}" "${VAULT_URL}/v1/${vault_path}")
            value=$(echo "${SECRET_JSON}" | yq -p=json -r ".data.data[\"${key}\"]")
            if [ -z "${value}" ] || [ "${value}" = "null" ]; then
              echo "Failed to read key '${key}' from '${vault_path}'" >&2
              echo "${SECRET_JSON}" >&2
              exit 1
            fi
            echo "::add-mask::${value}"
            echo "${env_name}=${value}" >> "$GITHUB_ENV"
          done
        fi

