name: Deploy blockscout-stack

on:
  workflow_call:
    inputs:
      appName:
        description: 'Name of application to deploy'
        required: true
        default: ''
        type: string
      globalEnv:
        description: 'Environment Name'
        required: true
        default: 'testing'
        type: string
      helmfileDir:
        description: 'Directory to run helmfile'
        required: false
        default: '.'
        type: string
      helmfileCommand:
        description: 'Command to call helmfile deploy with (apply or sync, usually)'
        required: false
        default: 'apply'
        type: string
      helmfileParameters:
        description: 'Parameters to pass to helmfile deploy'
        required: false
        default: '--suppress-diff'
        type: string
      kubeConfigSecret:
        description: 'Path to kubeconfig in vault'
        required: true
        default: ''
        type: string
      vaultRole:
        description: 'Role to authenticate in vault'
        required: true
        default: ''
        type: string

jobs:
  deploy:
    name: Deploy
    permissions: write-all
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4

      - name: Configure Kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: 'v1.25.4'
        id: install

      # Install helm, helm-secrets, sops
      - name: Install tools
        shell: bash
        run: |
          sudo apt-get install apt-transport-https gnupg wget --yes
          wget https://get.helm.sh/helm-v3.18.6-linux-amd64.tar.gz
          tar -xzf "helm-v3.18.6-linux-amd64.tar.gz"
          sudo mv "linux-amd64/helm" /usr/local/bin/helm
          sudo chmod +x /usr/local/bin/helm
          helm plugin install https://github.com/jkroepke/helm-secrets
          helm plugin install https://github.com/databus23/helm-diff
          cd /tmp
          curl -O -L -C - https://github.com/helmfile/helmfile/releases/download/v1.1.0/helmfile_1.1.0_linux_amd64.tar.gz
          tar -xzvf helmfile_1.1.0_linux_amd64.tar.gz
          sudo mv helmfile /usr/bin/helmfile
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Get Vault credentials
        id: retrieve-vault-secrets
        uses: hashicorp/vault-action@v2.4.1
        with:
          url: https://vault.k8s.blockscout.com
          role: ${{ inputs.vaultRole }}
          path: github-jwt
          method: jwt
          tlsSkipVerify: false
          exportToken: true
          secrets: |
            ${{ inputs.kubeConfigSecret }} kubeconfig | KUBECONFIG_BASE64 ;
      - name: Check GitHub deployment name
        if: ${{ inputs.globalEnv == 'review' }}
        id: deployment-name
        shell: bash
        run: |
          mkdir -p ~/.kube
          echo $KUBECONFIG_BASE64 | base64 --decode > ~/.kube/config
          chmod 600 ~/.kube/config
          cd ${{ inputs.helmfileDir }}
          helmfile -e ${{ inputs.globalEnv }} -l app=${{ inputs.appName }} write-values --output-file-template "helmfile/bs-stack.yaml"
          echo "DEPLOYMENT_URL=https://$(cat helmfile/bs-stack.yaml|yq '.frontend.ingress.hostname')" >> "$GITHUB_ENV"
          kubectl create namespace ${{ inputs.appName }} --dry-run=client -o yaml | kubectl apply -f -
          kubectl annotate namespace ${{ inputs.appName }} field.cattle.io/projectId=${{ secrets.RANCHER_PROJECT_ID }} --overwrite

      - uses: chrnorm/deployment-action@v2
        name: Create GitHub deployment
        if: ${{ inputs.globalEnv == 'review' }}
        id: deployment
        with:
          token: '${{ github.token }}'
          environment-url: ${{env.DEPLOYMENT_URL}}
          environment: review
          auto-inactive: false

      # Deploy newly built changes to EKS cluster.
      - name: Deploy
        shell: bash
        run: |
          mkdir -p ~/.kube
          echo $KUBECONFIG_BASE64 | base64 --decode > ~/.kube/config
          chmod 600 ~/.kube/config
          cd ${{ inputs.helmfileDir }}
          helmfile -e ${{ inputs.globalEnv }} -l app=${{ inputs.appName }} ${{ inputs.helmfileCommand }} ${{ inputs.helmfileParameters }}

      - name: Update deployment status (success)
        if: ${{ success() && inputs.globalEnv == 'review' }}
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{env.DEPLOYMENT_URL}}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: 'success'
          auto-inactive: false

      - name: Update deployment status (failure)
        if: ${{ failure() && inputs.globalEnv == 'review' }}
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{env.DEPLOYMENT_URL}}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: 'failure'

      - name: Add annotation to workflow
        if: ${{ success() && inputs.globalEnv == 'review' }}
        run: echo "::notice title='Deployment URL'::${{env.DEPLOYMENT_URL}}"
